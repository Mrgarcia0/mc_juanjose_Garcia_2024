# -*- coding: utf-8 -*-
"""taller7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tAtRFcgNhrnGLEMeKcKfNMP6ZBNElJ7Y
"""

def decimal_a_hexadecimal(numero):
    digitos_hex = "0123456789ABCDEF"
    resultado = ""

    while numero >= 16:
        residuo = numero % 16
        resultado = digitos_hex[residuo] + resultado
        numero = numero // 16

    resultado = digitos_hex[numero] + resultado
    return resultado

numeros = [611, 48, 5000, 6199]
for num in numeros:
    print(f"{num} en base 16 es: {decimal_a_hexadecimal(num)}")

def octal_a_decimal(numero_octal):
    decimal = 0
    numero_str = str(numero_octal)
    for i in range(len(numero_str)):
        digito = int(numero_str[len(numero_str)-1-i])
        potencia = 8 ** i
        if potencia > digito:
            break
        decimal += digito * potencia
    return decimal

numeros_octales = [500, 485, 5445, 277]

for num_octal in numeros_octales:
    print(f"{num_octal} en base 10 es: {octal_a_decimal(num_octal)}")