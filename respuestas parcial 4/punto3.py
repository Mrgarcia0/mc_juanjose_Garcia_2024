# -*- coding: utf-8 -*-
"""punto3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18i6EsFZBaxF3QOvFbLQPQRD_xkmDX-3R
"""

import numpy as np
import matplotlib.pyplot as plt

# Datos
x = np.array([1, 3, 5, 7, 9, 11, 13])
y = np.array([1.2, 1.5, 1.7, 2.1, 2.4, 2.7, 3.2])

# Funci칩n para ajuste lineal
def ajuste_lineal(x, y):
    A = np.vstack([x, np.ones(len(x))]).T
    m, c = np.linalg.lstsq(A, y, rcond=None)[0]
    return m, c

# Funci칩n para ajuste de potencia
def ajuste_potencia(x, y):
    p = np.polyfit(np.log(x), y, 1)
    return np.exp(p[1]), p[0]

# Funci칩n para ajuste de polinomio de grado 2
def ajuste_polinomial(x, y):
    p = np.polyfit(x, y, 2)
    return p

# Ajustes
m, c = ajuste_lineal(x, y)
a, b = ajuste_potencia(x, y)
coefficients = ajuste_polinomial(x, y)

# Generar puntos para las funciones ajustadas
x_lineal = np.linspace(min(x), max(x), 100)
y_lineal = m * x_lineal + c

x_potencia = np.linspace(min(x), max(x), 100)
y_potencia = a * np.exp(b * x_potencia)

x_polinomial = np.linspace(min(x), max(x), 100)
y_polinomial = np.polyval(coefficients, x_polinomial)

# Gr치ficas
plt.figure(figsize=(12, 6))

# Datos originales
plt.scatter(x, y, label='Datos originales')

# Ajuste lineal
plt.plot(x_lineal, y_lineal, label=f'Ajuste lineal: y = {m:.2f}x + {c:.2f}')

# Ajuste de potencia
plt.plot(x_potencia, y_potencia, label=f'Ajuste de potencia: y = {a:.2f} * e^({b:.2f}x)')

# Ajuste polinomial
plt.plot(x_polinomial, y_polinomial, label=f'Ajuste polinomial: {coefficients[0]:.2f}x^2 + {coefficients[1]:.2f}x + {coefficients[2]:.2f}')

plt.xlabel('x')
plt.ylabel('y')
plt.title('Ajuste de funciones a los datos')
plt.legend()
plt.grid(True)
plt.show()